#!/usr/bin/env node
'use strict'

const path = require('path')
const Promise = require('bluebird-co')
const DependencyManager = require('five-bells-integration-test-loader').DependencyManager
const spawn = require('../util').spawn
const command = process.argv[2]
const pluginDependencies = {
	'ilp-plugin-xrp-paychan': 'ripple/ilp-plugin-xrp-paychan'
}
const dependencies = new DependencyManager({ defaultDependencies: Object.assign({}, {
	'ilp-plugin-payment-channel-framework': 'interledgerjs/ilp-plugin-payment-channel-framework'
}, pluginDependencies)})
const commands = ['all', 'setup', 'test']
const mocha = path.resolve(require.resolve('mocha'), '../bin/mocha')

function mochaRun (testName) {
  console.log(path.resolve(__dirname, '../../integration-test/node_modules'))	
  return spawn(mocha, [
    path.resolve(__dirname, `../tests/${testName}.js`),
    '--no-timeouts',
    '-r', 'co-mocha'
  ], {
    cwd: dependencies.testDir,
    stdio: 'inherit'
  })
}

function usage () {
  console.error('usage: ' + process.argv[1] + ' <command> [<tests>]')
  console.error('commands:')
  console.error('  all    # setup then test')
  console.error('  setup  # install plugins')
  console.error('  test   # run plugin tests')
  process.exit(1)
}

if (commands.indexOf(command) === -1) usage()
Promise.coroutine(function * () {
  let code = 0
  if (command === 'all' || command === 'setup') {
    code = code || (yield dependencies.install())
  }

  if (command === 'all' || command === 'test') {
	for (const plugin in pluginDependencies) {
		// if (!code) break
		console.log('Running tests for', plugin)
		code = code || (yield mochaRun(plugin))
	}
  }
  process.exit(code)
})().done()
